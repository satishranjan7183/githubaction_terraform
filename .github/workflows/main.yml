name: 'Terraform'

# Workflow kab trigger hoga (kab chalega)
on: workflow_dispatch
jobs:
  terraform:
    name: 'Terraform'
    # Yeh job Ubuntu ke latest version par chalegi
    runs-on: self-hosted

    # Environment variables jo Terraform ko Azure se connect karne ke liye chahiye
    # Inhe GitHub Repository ke Secrets mein store karna zaroori hai
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}

    steps:
      # Step 1: Repository ka code runner machine par checkout (download) karta hai
      - name: Checkout
        uses: actions/checkout@v4

      # Step 2: Terraform CLI ko runner par setup karta hai
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0 # Aap yahan specific version daal sakte hain

      # Step 3: Terraform ko initialize karta hai (providers aur backend setup)
      - name: Terraform Init
        run: terraform init
        working-directory: ./environment/dev

      # Step 4: Terraform code ko format ke liye check karta hai
      - name: Terraform Format
        run: terraform fmt -check
        working-directory: ./environment/dev

      # Step 5: Terraform code ko validate karta hai syntax errors ke liye
      - name: Terraform Validate
        run: terraform validate
        working-directory: ./environment/dev

      # Step 6: Terraform Plan (Sirf Pull Request ke liye chalega)
      # Yeh batata hai ki kya changes apply honge, lekin apply nahi karta
      - name: Terraform Plan
        if: github.event_name == 'pull_request'
        run: terraform plan -input=false

      # Step 7: Terraform Apply (Sirf 'main' branch mein push hone par chalega)
      # Yeh actual mein changes ko Azure par apply karta hai
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
        working-directory: ./environment/dev
